import "../../Fastfile"

# Update fastlane
update_fastlane

default_platform(:android)

build_number = ENV['BUILD_NUMBER'] ? ENV['BUILD_NUMBER'] : 0
android_firebase_app_id = "1:305132849030:android:6cf0cd5ec064fad3ffce07"

platform :android do
  lane :build do
    # Flutter build
    fetch_dependencies
    build_autogenerated_code

    gradle(
      task: "bundle",
      build_type: "Release",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_SIGNING_STORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
        "android.injected.version.code" => build_number,
      }
    )
  end

  lane :deploy do |options|
    if options[:type].nil? then
      return
    end

    isBranchDeploy = options[:type] == 'branch'
    build_types = get_build_type(options[:type])
    type = build_types["android_type"]

    # Build Android app
    build

    # Distribute to Firebase
    firebase_app_distribution(
      app: android_firebase_app_id,
      release_notes: ENV['RELEASE_NOTES'],
      service_credentials_file: ENV['FIREBASE_JSON'],
      groups: "Testers",
      android_artifact_type: "AAB",
      android_artifact_path: "#{root_path}/build/app/outputs/bundle/release/app-release.aab"
    )

    if not isBranchDeploy then
      upload_to_play_store(
        track: type,
        json_key:ENV['FIREBASE_JSON'], 
        version_code: build_number
      )
    end
  end

  lane :update_release_url do
    firebase_app_distribution_get_latest_release(
      app: android_firebase_app_id,
      service_credentials_file: ENV['FIREBASE_JSON']
    )

    release_name = Actions.lane_context[:FIREBASE_APP_DISTRO_LATEST_RELEASE][:name]
    release_url = get_firebase_release_url(release_name, android_firebase_app_id)

    update_pr_and_jira(release_url: release_url, ios: false)
  end
end

