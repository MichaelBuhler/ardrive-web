"use strict";let retryStatusCodes=[408,429,440,460,499,500,502,503,504,520,521,522,523,524,525,527,598,599];const isStatusCodeError=e=>e>=400&&e<=599,retryDelay=(e,t)=>t*Math.pow(1.5,e),logMessage=(e,t,s,o)=>`uri: ${e}
  response: Http status error [${t}]: ${s}
  retryAttempts: ${o}`,logger={retry:(e,t,s,o)=>{const a=logMessage(e,t,s,o);console.warn(`Network Request Retry
${a}`)},error:(e,t,s,o)=>{const a=logMessage(e,t,s,o);console.error(`Network Request Error
${a}`)}},requestType={json:{contentType:"application/json; charset=utf-8",getResponse:async e=>await e.json()},bytes:{contentType:"application/octet-stream",getResponse:async e=>await e.arrayBuffer()},text:{contentType:"plain/text; charset=utf-8",getResponse:async e=>await e.text()}},get=async([e,t,s,o,a=!1,i=0])=>{try{const n=await fetch(e,{method:"GET",redirect:"follow"}),r=n.status,c=n.statusText;if(s>0&&retryStatusCodes.includes(r))return a||logger.retry(e,r,c,i),console.log("retrying"),await get([e,t,s-1,o,a,i+1]);if(isStatusCodeError(r))return{error:`Network Request Error
${logMessage(e,r,c,i)}`,retryAttempts:i};console.log("start getting request");const u=await requestType[`${t}`].getResponse(n);return console.log("got request"),{statusCode:r,statusMessage:c,data:u,retryAttempts:i}}catch(n){return console.error(n),console.error(n.stack),{error:`${n}`,retryAttempts:i}}},post=async([e,t,s,o,a,i,n=!1,r=0])=>{try{const c=await fetch(e,{method:"POST",headers:{...s!==requestType.text.contentType?{"Content-Type":s}:{}},redirect:"follow",body:t}),u=c.status,p=c.statusText;if(a>0&&retryStatusCodes.includes(u))return n||logger.retry(e,u,p,r),await post([e,t,s,o,a-1,i,n,r+1]);if(isStatusCodeError(u))return{error:`Network Request Error
${logMessage(e,u,p,r)}`,retryAttempts:r};const g=await requestType[`${o}`].getResponse(c);return{statusCode:u,statusMessage:p,data:g,retryAttempts:r}}catch(c){return{error:`${c}`,retryAttempts:r}}};self.get=get,self.post=post;
